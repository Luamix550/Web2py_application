{"ast":null,"code":"/* // Import React and useState hook\nimport React, { useState } from 'react';\n\n// Define an interface for the Student\ninterface Student {\n    name: string;\n    email: string;\n}\n\n// Define the StudentRegister component\nconst StudentRegister = () => {\n    // Use the useState hook to manage the student state\n    const [student, setStudent] = useState<Student>({ name: '', email: '' });\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    // Define the handleInputChange function\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setStudent({ ...student, [name]: value });\n    };\n\n    // Define the handleSubmit function\nconst handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // Reset the isSubmitted and error states\n    setIsSubmitted(false);\n    setError(null);\n\n    // Validation for empty fields\n    if (!student.name || !student.email) {\n        alert('Please fill in all fields');\n        return;\n    }\n\n    // Additional validation for the username\n    if (student.name.length < 3) {\n        alert('The username must be at least 3 characters long');\n        return;\n    }\n\n    // Additional validation for the email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(student.email)) {\n        alert('Please enter a valid email');\n        return;\n    }\n\n    // API call\n    try {\n        const response = await registerStudent(student);\n    \n        if (!response.ok) {\n            throw new Error(`The user has already been created`);\n        }\n    \n        setIsSubmitted(true);\n\n    } catch (error) {\n        if (error instanceof Error) {\n            setError(error.message);\n        } else {\n            console.error(error);\n        }\n    }\n};\n\n    // Render the component\n    return (\n        <main className=\"h-screen flex flex-col items-center justify-center\">\n            <h2 className=\"text-4xl mb-4 md:mb-6 font-bold hover:drop-shadow-[0_0_0.3rem_#ffffff70] text-gray-200 hover:duration-300 text-center duration-400\">Student Register</h2>\n            <div className='bg-gradient-to-b from-black from-75% to-violet-900 hover:duration-200 grid justify-items-center rounded-3xl py-6 md:py-5 shadow-md shadow-purple-600 border-[1px] hover:shadow-violet-500 hover:shadow-lg border-purple-950 w-full max-w-screen-lg mx-auto'>\n                <form onSubmit={handleSubmit} className=\"space-y-4 md:space-y-3 p-4 md:p-6 w-full mx-auto\">\n                    <div className=\"text-sm mb-2\">\n                        <label>\n                            Student name:\n                            <input type=\"text\" name=\"name\" value={student.name} onChange={handleInputChange} className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\" required />\n                        </label>\n                        <label>\n                            Email:\n                            <input type=\"email\" name=\"email\" value={student.email} onChange={handleInputChange} className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\" required />\n                        </label>\n                    </div>\n                    <button type=\"submit\" className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\">Register</button>\n                    {isSubmitted && <p className=\"mt-4 text-center text-green-300\">Student has been registered successfully!</p>}\n                    {error && <p className=\"mt-4 text-center text-red-500\">Error registering student: {error}</p>}\n                </form>\n            </div>\n        </main>\n    );\n};\n\n// Function to register a student\nasync function registerStudent(student: Student) {\n    return await fetch('http://127.0.0.1:8000/SIP_application/students/register', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(student)\n    });\n}\n\n// Export the StudentRegister component\nexport default StudentRegister; */","map":{"version":3,"names":[],"sources":["/home/jegomez/Web2py_application/web2py/applications/SIP_application/client/src/components/studentRegister1.tsx"],"sourcesContent":["/* // Import React and useState hook\nimport React, { useState } from 'react';\n\n// Define an interface for the Student\ninterface Student {\n    name: string;\n    email: string;\n}\n\n// Define the StudentRegister component\nconst StudentRegister = () => {\n    // Use the useState hook to manage the student state\n    const [student, setStudent] = useState<Student>({ name: '', email: '' });\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    // Define the handleInputChange function\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setStudent({ ...student, [name]: value });\n    };\n\n    // Define the handleSubmit function\nconst handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // Reset the isSubmitted and error states\n    setIsSubmitted(false);\n    setError(null);\n\n    // Validation for empty fields\n    if (!student.name || !student.email) {\n        alert('Please fill in all fields');\n        return;\n    }\n\n    // Additional validation for the username\n    if (student.name.length < 3) {\n        alert('The username must be at least 3 characters long');\n        return;\n    }\n\n    // Additional validation for the email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(student.email)) {\n        alert('Please enter a valid email');\n        return;\n    }\n\n    // API call\n    try {\n        const response = await registerStudent(student);\n    \n        if (!response.ok) {\n            throw new Error(`The user has already been created`);\n        }\n    \n        setIsSubmitted(true);\n\n    } catch (error) {\n        if (error instanceof Error) {\n            setError(error.message);\n        } else {\n            console.error(error);\n        }\n    }\n};\n\n    // Render the component\n    return (\n        <main className=\"h-screen flex flex-col items-center justify-center\">\n            <h2 className=\"text-4xl mb-4 md:mb-6 font-bold hover:drop-shadow-[0_0_0.3rem_#ffffff70] text-gray-200 hover:duration-300 text-center duration-400\">Student Register</h2>\n            <div className='bg-gradient-to-b from-black from-75% to-violet-900 hover:duration-200 grid justify-items-center rounded-3xl py-6 md:py-5 shadow-md shadow-purple-600 border-[1px] hover:shadow-violet-500 hover:shadow-lg border-purple-950 w-full max-w-screen-lg mx-auto'>\n                <form onSubmit={handleSubmit} className=\"space-y-4 md:space-y-3 p-4 md:p-6 w-full mx-auto\">\n                    <div className=\"text-sm mb-2\">\n                        <label>\n                            Student name:\n                            <input type=\"text\" name=\"name\" value={student.name} onChange={handleInputChange} className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\" required />\n                        </label>\n                        <label>\n                            Email:\n                            <input type=\"email\" name=\"email\" value={student.email} onChange={handleInputChange} className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\" required />\n                        </label>\n                    </div>\n                    <button type=\"submit\" className=\"block w-full mt-4 hover:drop-shadow-[0_0_0.1rem_#ffffff70] duration-400 p-2 md:p-1 text-center text-gray-300 md:text-[15px] hover:text-white border border-purple-400 shadow shadow-purple-950 hover:duration-300 hover:shadow-inner hover:shadow-purple-700 rounded-full\">Register</button>\n                    {isSubmitted && <p className=\"mt-4 text-center text-green-300\">Student has been registered successfully!</p>}\n                    {error && <p className=\"mt-4 text-center text-red-500\">Error registering student: {error}</p>}\n                </form>\n            </div>\n        </main>\n    );\n};\n\n// Function to register a student\nasync function registerStudent(student: Student) {\n    return await fetch('http://127.0.0.1:8000/SIP_application/students/register', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(student)\n    });\n}\n\n// Export the StudentRegister component\nexport default StudentRegister; */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}