{"ast":null,"code":"/* StudentController.ts */ // Import necessary classes\n// Define the StudentController class\nexport class StudentController{// Constructor for the StudentController class\nconstructor(repository,factory){// Declare private variables for the repository and factory\nthis.repository=void 0;this.factory=void 0;this.repository=repository;this.factory=factory;}// Method to register a student\nasync registerStudent(name,email){// Create a new student using the factory\nconst student=this.factory.create(name,email);// Register the student using the repository\nconst response=await this.repository.registerStudent(student);// If the registration was successful, return the student\nif(response.ok){return student;}else{// If the registration was not successful, throw an error\nthrow new Error(\"The user has already been created\");// Assume the error details include a \"message\" property\n}}}","map":{"version":3,"names":["StudentController","constructor","repository","factory","registerStudent","name","email","student","create","response","ok","Error"],"sources":["/home/jegomez/Web2py_application/web2py/applications/SIP_application/client/src/controllers/StudentController.ts"],"sourcesContent":["/* StudentController.ts */\n\n// Import necessary classes\nimport { StudentModel } from '../models/StudentModel';\nimport { StudentRepository } from '../repository/StudentRepository';\nimport { StudentFactory } from '../factory/StudentFactory';\n\n// Define the StudentController class\nexport class StudentController {\n    // Declare private variables for the repository and factory\n    private repository: StudentRepository;\n    private factory: StudentFactory;\n\n    // Constructor for the StudentController class\n    constructor(repository: StudentRepository, factory: StudentFactory) {\n        this.repository = repository;\n        this.factory = factory;\n    }\n\n    // Method to register a student\n    async registerStudent(name: string, email: string): Promise<StudentModel> {\n        // Create a new student using the factory\n        const student = this.factory.create(name, email);\n\n        // Register the student using the repository\n        const response = await this.repository.registerStudent(student);\n\n        // If the registration was successful, return the student\n        if (response.ok) {\n            return student;\n        } else {\n            // If the registration was not successful, throw an error\n            throw new Error(\"The user has already been created\"); // Assume the error details include a \"message\" property\n        }\n    }\n}\n"],"mappings":"AAAA,2BAEA;AAKA;AACA,MAAO,MAAM,CAAAA,iBAAkB,CAK3B;AACAC,WAAWA,CAACC,UAA6B,CAAEC,OAAuB,CAAE,CALpE;AAAA,KACQD,UAAU,aACVC,OAAO,QAIX,IAAI,CAACD,UAAU,CAAGA,UAAU,CAC5B,IAAI,CAACC,OAAO,CAAGA,OAAO,CAC1B,CAEA;AACA,KAAM,CAAAC,eAAeA,CAACC,IAAY,CAAEC,KAAa,CAAyB,CACtE;AACA,KAAM,CAAAC,OAAO,CAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,CAACH,IAAI,CAAEC,KAAK,CAAC,CAEhD;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,KAAI,CAACP,UAAU,CAACE,eAAe,CAACG,OAAO,CAAC,CAE/D;AACA,GAAIE,QAAQ,CAACC,EAAE,CAAE,CACb,MAAO,CAAAH,OAAO,CAClB,CAAC,IAAM,CACH;AACA,KAAM,IAAI,CAAAI,KAAK,CAAC,mCAAmC,CAAC,CAAE;AAC1D,CACJ,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}